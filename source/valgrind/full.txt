Reading data from 'callgrind.out.16287'...
--------------------------------------------------------------------------------
Profile data file 'callgrind.out.16287' (creator: callgrind-3.5.0)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
L2 cache: 
Timerange: Basic block 0 - 6310638870
Trigger: Program termination
Profiled target:  ./test-allocator (PID 16287, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
         Ir 
--------------------------------------------------------------------------------
128,874,034  PROGRAM TOTALS

--------------------------------------------------------------------------------
        Ir  file:function
--------------------------------------------------------------------------------
36,594,378  ???:memcpy [/lib/libc-2.5.so]
35,184,835  /afs/ir/users/b/e/benny3t3/assign7/allocator.c:mymalloc [/afs/ir.stanford.edu/users/c/w/cwoebker/cs107/assign7/test-allocator]
21,425,537  /afs/ir/users/b/e/benny3t3/assign7/test-allocator.c:EvalScriptForPerformance [/afs/ir.stanford.edu/users/c/w/cwoebker/cs107/assign7/test-allocator]
20,817,930  /afs/ir/users/b/e/benny3t3/assign7/allocator.c:coalesce [/afs/ir.stanford.edu/users/c/w/cwoebker/cs107/assign7/test-allocator]
 9,291,602  /afs/ir/users/b/e/benny3t3/assign7/allocator.c:myfree [/afs/ir.stanford.edu/users/c/w/cwoebker/cs107/assign7/test-allocator]
 3,209,575  /afs/ir/users/b/e/benny3t3/assign7/segment.c:HeapSegmentSize [/afs/ir.stanford.edu/users/c/w/cwoebker/cs107/assign7/test-allocator]
 1,710,499  /afs/ir/users/b/e/benny3t3/assign7/allocator.c:myrealloc [/afs/ir.stanford.edu/users/c/w/cwoebker/cs107/assign7/test-allocator]

--------------------------------------------------------------------------------
-- Auto-annotated source: /afs/ir/users/b/e/benny3t3/assign7/allocator.c
--------------------------------------------------------------------------------
       Ir 

-- line 83 ----------------------------------------
        .  // NOTE: mult has to be power of 2 for this to work!
        .  static inline size_t RoundUp(size_t sz, int mult)
        .  {
        .     return (sz + mult-1) & ~(mult-1);
        .  }
        .  
        .  static inline size_t createHeaderSize(size_t sizeBits, unsigned int allocationBit)
        .  {
  639,844      return ((sizeBits) | (allocationBit));
        .  }
        .  
        .  static inline size_t getSize(headerT *header)
        .  {
5,079,346      return ((unsigned int)(header->payloadSize) & ~0x7);
        .  }
        .  
        .  static inline size_t isAllocated(headerT *header)
        .  {
  983,381      return ((unsigned int)(header->payloadSize) & 0x1);
        .  }
        .  
        .  ////////////////////////////
        .  // BLOCK HELPER FUNCTIONS //
        .  ////////////////////////////
        .  
        .  // Given a pointer to block header, advance past
        .  // header to access start of payload
        .  static inline void *PayloadForHeader(headerT *header)
        .  {
  314,220     return (char *)header + sizeof(headerT);
        .  }
        .  
        .  // Given a pointer to start of payload, simply back up
        .  // to access its block header
        .  static inline headerT *HeaderForPayload(void *payload)
        .  {
  352,767      return (headerT *)((char *)payload - sizeof(headerT));
        .  }
        .  
        .  // Warning these two functions depend on the header!!!!!!! so make sure to reget them or sth...
        .  
        .  static inline headerT *FooterForPayload(void *payload)
        .  {
        .      return (headerT *)((char *)payload + (getSize(HeaderForPayload(payload)) - HEADER2));
        .  }
-- line 127 ----------------------------------------
-- line 147 ----------------------------------------
        .      }
        .      return (void *)((char *)(payload) - getSize((headerT *)((char *)payload-HEADER2)));
        .  }
        .  
        .  // getting next or previous Header
        .  static inline headerT *nextHeader(headerT *header)
        .  {
        .      size_t currentSize = getSize(header);
4,776,522      if( (void *)((char *)header+currentSize) == endHeapSegment)
        .          return NULL; // last Header reached
  605,780      return (headerT *)((char *)header+currentSize);
        .  }
        .  
        .  static inline headerT *previousHeader(headerT *header)
        .  {
  975,666      if((void *)header == startHeapSegment){
        .          return NULL; // payload is the first Header , nothing there before
        .      }
1,227,472      return (headerT *)((char *)(header) - getSize( (headerT *) ((char *)header - sizeof(headerT)) ));
        .  }
        .  
        .  /*void validate_heap() {
        .      void *end = (void *)((char *)HeapSegmentStart() + HeapSegmentSize());
        .      for(headerT *header = (headerT *)HeapSegmentStart(); (unsigned int)header < (unsigned int)end; header = (headerT *)((char *)header + getSize(header))) {
        .          if (isAllocated(header) == 0) { // if free check if in free list
        .              bool found = false;
        .              void *ptr = PayloadForHeader(header);
-- line 173 ----------------------------------------
-- line 196 ----------------------------------------
        .      }
        .  }
        .  */
        .  
        .  // as first element
        .  static void addToFreeList(headerT *freeHeader) {
        .      //void *freePtr = PayloadForHeader(freeHeader);
        .      //int index = numForSize(getSize(HeaderForPayload(freePtr)));
3,312,186      if (mainList.first == NULL || mainList.last == NULL) { // no elements so far
  456,486          FooterForHeader(freeHeader)->ptr = NULL; // set next to NULL
  152,162          freeHeader->ptr = NULL; // set previous of first element to NULL
  152,162          mainList.first = freeHeader;
  304,324          mainList.last = freeHeader;
        .      } else { // append to list as first element
1,427,850          FooterForHeader(freeHeader)->ptr = mainList.first;
  475,950          freeHeader->ptr = NULL;
  951,900          mainList.first->ptr = freeHeader;
  475,950          mainList.first = freeHeader; // set new last ptr
        .          //printf("Added[%p]: -> [%p] -> [%p]\n", mainList.first, HeaderForPayload(mainList.last)->ptr, mainList.last);
        .      }
  658,673      mainList.size++;
        .  }
        .  
        .  static void removeFromFreeList(headerT *freeHeader) {
        .      //int index = numForSize(getSize(HeaderForPayload(freePtr)));
  627,444      headerT *prev_Header = freeHeader->ptr;
  954,394      headerT *next_Header = FooterForHeader(freeHeader)->ptr;
        .  
1,254,888      if (prev_Header) {
  434,920          if (next_Header) {
        .              // just remove and reconnect
  555,564              FooterForHeader(prev_Header)->ptr = next_Header;
  185,188              next_Header->ptr = prev_Header;
        .          }
        .          else {
        .              // next is NULL, so prev is new last element
   96,816              FooterForHeader(prev_Header)->ptr = NULL;
   64,544              mainList.last = prev_Header;
        .          }
        .      }
        .      else {
  819,968          if (next_Header) {
        .              // prev is NULL, so next is new first element
  257,865              next_Header->ptr = NULL;
  515,730              mainList.first = next_Header;
        .          }
        .          else {
        .              // both are invalid, so list is empty
  152,119              mainList.first = NULL;
  304,238              mainList.last = NULL;
        .          }
        .      }
        .  
1,451,577      mainList.size--;
        .  }
        .  
        .  
        .  /* find the next fit in the free list
        .   */
        .  static headerT *find_fit(size_t adjustedSize)
        .  {
1,883,898      if (mainList.first == NULL || mainList.last == NULL) {
        .          return NULL; // list is empty, nothing to find
        .      }
        .      /* find_next code thats broken
        .      if (curFreePos == NULL) {
        .          curFreePos = mainList.first;
        .      }
        .      int count = 0;
        .      while (true) {
-- line 265 ----------------------------------------
-- line 276 ----------------------------------------
        .          if (count == mainList.size) {
        .              break;
        .          }
        .          count++;
        .      }
        .      return NULL;*/
        .      //int find = numForSize(adjustedSize);
        .      headerT *currentHeader = mainList.first;
2,815,106      while (currentHeader != NULL) {
3,429,820          if (getSize(currentHeader) >= adjustedSize) {
        .              return currentHeader;
        .          }
1,407,553          currentHeader = FooterForHeader(currentHeader)->ptr;
        .      }
        .      return NULL;
        .  }
        .  
        .  /* The responsibility of the myinit function is to set up the heap to
        .   * its initial, empty ready-to-go state.  This will be called before
        .   * any allocation requests are made.  The myinit function may also
        .   * be called later in program and is expected to wipe out the current
-- line 296 ----------------------------------------
-- line 314 ----------------------------------------
        .  
        .      startHeapSegment = HeapSegmentStart();
        .      endHeapSegment = (void*)((char*)startHeapSegment+(unsigned int)HeapSegmentSize());
        .  
        .      return 0;
        .  }
        .  
        .  static headerT *coalesce(headerT *header)
2,276,554  {
        .      bool previousBlockAllocated=0;
        .      bool nextBlockAllocated=0;
        .  
        .      headerT *prev_Header = previousHeader(header);
        .      headerT *next_Header = nextHeader(header);
        .  
1,264,180      if((prev_Header==NULL)||(isAllocated(prev_Header)==1)){
        .          previousBlockAllocated=true;
        .      } else {
        .          removeFromFreeList(prev_Header);
        .      }
1,287,387      if((next_Header==NULL)||(isAllocated(next_Header)==1)){
        .         nextBlockAllocated=true;
        .      } else {
        .          removeFromFreeList(next_Header);
        .      }
        .  
        .      size_t size = getSize(header);
        .      size_t newSize;
        .  
  980,632      if (previousBlockAllocated && nextBlockAllocated) { // none are free
        .          return header;
        .      }
        .      else if (previousBlockAllocated && !nextBlockAllocated) { // next is free
  198,132          size += getSize(next_Header);
        .          newSize = createHeaderSize(size, 0);
   66,044          header->payloadSize = newSize;
   66,044          FooterForHeader(header)->payloadSize = newSize;
        .      }
  320,256      else if (!previousBlockAllocated && nextBlockAllocated) { // previous is free
  223,917          size += getSize(prev_Header);
        .          newSize = createHeaderSize(size, 0);
   74,639          prev_Header->payloadSize = newSize;
  298,556          FooterForHeader(header)->payloadSize = newSize;
        .  
        .          header = prev_Header;
        .      }
        .      else { // both are free
  512,934          size += getSize(next_Header) +
        .                  getSize(prev_Header);
        .          newSize = createHeaderSize(size, 0);
   85,489          prev_Header->payloadSize = newSize;
  341,956          FooterForHeader(next_Header)->payloadSize = newSize;
        .  
        .          header = prev_Header;
        .      }
        .      return header;
2,276,554  }
        .  
        .  static void place(headerT *header, int adjustedSize)
        .  {
        .      // we can definetely remove the old pointer form the free list
        .      removeFromFreeList(header);
        .  
        .      headerT *footer= FooterForHeader(header);
  628,440      size_t remainder_t = getSize(header) - adjustedSize;
        .  
        .      //printf("Allocated bytes: %d = %d - %d\n", remainder_t, getSize(header), adjustedSize);
        .  
  628,440      if (remainder_t >= MINIMUM_BLOCK_SIZE) {
        .          //remainder bigger than min_blocksize, so we should split
  302,890  	    header->payloadSize = createHeaderSize(adjustedSize, 1);
  908,670  	    FooterForHeader(header)->payloadSize = header->payloadSize;
        .  
        .          headerT *split = nextHeader(header);
  302,890          split->payloadSize = createHeaderSize(remainder_t, 0);
  302,890          FooterForHeader(split)->payloadSize = createHeaderSize(remainder_t, 0);
        .          addToFreeList(split);
        .      }
        .      else{
        .          // remainder not bigger so we should take the whole memory
        .          // so all we do is that we set the allocated bit
   11,330  		header->payloadSize = createHeaderSize(getSize(header),1);
   22,660  		footer->payloadSize = header->payloadSize;
        .  	}
        .  }
        .  
        .  
        .  /*
        .  Check the list of free nodes to see if there are nodes that can be supplied to the client that have
        .  already been allocated and freed.
        .  If there are none, then bring in a new page of memory and provide the client with the newly allocated data
        .  */
        .  void *mymalloc(size_t requestedSize)
2,200,548  {
  943,092      if (requestedSize == 0) {
        .        return NULL;
        .      }
        .      // calcluate adjusted size
        .      size_t adjustedSize;
  942,660      if (requestedSize<=ALIGNMENT) {
        .          adjustedSize = MINIMUM_BLOCK_SIZE; // 24 bytes
        .      } else {
1,174,988          adjustedSize = 2 * sizeof(headerT) + RoundUp(requestedSize, 8);
        .      }
        .  
        .      // make sure second argument is a multiple of two......
        .      headerT *header;
        .  
        .      if ((header = find_fit(adjustedSize)) != NULL) { // if NULL nothing was found
        .          //place and split
        .          place(header, adjustedSize);
        .          return PayloadForHeader(header);
        .      }
        .  
        .      // no fit found, extend memory and place block */
        .      size_t extendsize = MAX(adjustedSize, HEAP_EXTEND_SIZE);
        .  
   13,726      size_t totalSize = RoundUp(extendsize, HeapPageSize());
  185,301  => /afs/ir/users/b/e/benny3t3/assign7/segment.c:HeapPageSize (8758x)
  102,323      size_t npages = totalSize/HeapPageSize();
   61,767  => /afs/ir/users/b/e/benny3t3/assign7/segment.c:HeapPageSize (8758x)
        .      //headerT *header;
   34,315      if ((header = ExtendHeapSegment(npages)) == NULL) {
  343,150  => /afs/ir/users/b/e/benny3t3/assign7/segment.c:ExtendHeapSegment (8758x)
        .        errno = ENOMEM; // heap segment cannot be extended
        .        return NULL;
        .      }
   20,589      endHeapSegment = (void*)((char*)startHeapSegment+(unsigned int)HeapSegmentSize());
   34,315  => /afs/ir/users/b/e/benny3t3/assign7/segment.c:HeapSegmentSize (8758x)
   20,589      header->payloadSize = createHeaderSize(npages * HeapPageSize(), 0);
   61,767  => /afs/ir/users/b/e/benny3t3/assign7/segment.c:HeapPageSize (8758x)
   20,589      FooterForHeader(header)->payloadSize = header->payloadSize;
        .  
        .      //ptr = PayloadForHeader(header);
   20,589      header = coalesce(header);
  426,427  => /afs/ir/users/b/e/benny3t3/assign7/allocator.c:coalesce (8758x)
        .      addToFreeList(header);
        .  
        .      place(header, adjustedSize);
        .      return PayloadForHeader(header);
2,200,548  }
        .  
        .  
        .  void myfree(void *ptr)
  903,471  {
  602,314      if (ptr == NULL) return;
        .  
        .      headerT *header = HeaderForPayload(ptr);
  628,440      if (isAllocated(header)==0) return;
        .  
        .      size_t size = getSize(header);
  314,220      header->payloadSize = createHeaderSize(size, 0);
  314,220      FooterForPayload(ptr)->payloadSize = createHeaderSize(size, 0);
        .  
        .      //printFreeList();
        .  
  942,660      header = coalesce(header);
19,274,251  => /afs/ir/users/b/e/benny3t3/assign7/allocator.c:coalesce (397251x)
        .      addToFreeList(header);
        .  
        .      //printFreeList();
        .      //validate_heap();
  602,314  }
        .  
        .  
        .  
        .  // realloc built on malloc/memcpy/free is easy to write.
        .  // This code will work ok on ordinary cases, but needs attention
        .  // to robustness. Realloc efficiency can be improved by
        .  // implementing a standalone realloc as opposed to
        .  // delegating to malloc/free.
        .  void *myrealloc(void *oldptr, size_t requestedSize)
  207,032  {
        .      // check docs on requirements
   51,758      if (oldptr == NULL) {
        .          return mymalloc(requestedSize);
        .      }
        .      headerT *oldHeader = HeaderForPayload(oldptr);
   51,758      if (isAllocated(oldHeader) == 0) {
        .          return NULL; // not allocated so no need to realloc - need to check for errno to set
        .      }
   51,758      if (requestedSize == 0) {
        .          myfree(oldptr);
        .          return NULL;
        .      }
        .  
        .      // thinking of anticipating reallocation - repeats usually
        .  
        .  	//payload size of old pointer
        .  	int oldPayloadSize = getSize(oldHeader);
        .  
        .  	int adjustedSize;
   77,637  	if(requestedSize<=ALIGNMENT){
        .  		adjustedSize = MINIMUM_BLOCK_SIZE;
        .  	}else{
   77,016  		adjustedSize = HEADER2 + RoundUp(requestedSize, 8);
        .  	}
        .      //smaller than before, or the same
   51,758      if (adjustedSize <= oldPayloadSize) {
        .  	   //if there is enough room at the end of this smaller block to add free nodes, do so.
   44,420      	if(oldPayloadSize-adjustedSize >= MINIMUM_BLOCK_SIZE){
        .              size_t oldSize = createHeaderSize(adjustedSize,1);
    8,278      		oldHeader->payloadSize = oldSize;
   16,556      		FooterForHeader(oldHeader)->payloadSize = oldSize;
        .  
        .      		headerT *split = nextHeader(oldHeader);
        .  
        .      		size_t remainder_t = oldPayloadSize - adjustedSize;
        .              size_t nextSize = createHeaderSize(remainder_t,0);
        .      		split->payloadSize = nextSize;
    4,139      		split->payloadSize = nextSize;
    8,278      		split = coalesce(split);
1,117,252  => /afs/ir/users/b/e/benny3t3/assign7/allocator.c:coalesce (5248x)
        .      		addToFreeList(split);
        .  
        .      		return oldptr;
        .      	} else { // just take the old one since we can't shrink it
        .              return oldptr;
        .          }
        .      } else { // new size is bigger
   59,096          if (adjustedSize - oldPayloadSize < MINIMUM_BLOCK_SIZE) {
        .              // standard, no free block can be found -> don't even try
        .          } else {
        .              headerT *next_Header = nextHeader(oldHeader);
        .              // if exists and free
   21,380              if (next_Header != NULL && isAllocated(next_Header) == 0) {
    4,664                  size_t newSize = oldPayloadSize + getSize(next_Header);
        .                  // enough space there
    4,664                  if (newSize >= adjustedSize) {
        .                      removeFromFreeList(next_Header);
        .                      newSize = createHeaderSize(newSize, 1);
    3,126                      oldHeader->payloadSize = newSize;
    7,815                      FooterForHeader(oldHeader)->payloadSize = newSize;
        .                      return oldptr;
        .                  }
        .              }
        .          }
        .      }
        .  
        .  
        .      // standard case
   39,633      void *newptr = mymalloc(requestedSize);
1,919,864  => /afs/ir/users/b/e/benny3t3/assign7/allocator.c:mymalloc (17317x)
  114,995      memcpy(newptr, oldptr, oldPayloadSize < requestedSize ? oldPayloadSize: requestedSize);
36,812,077  => ???:memcpy (17316x)
        .      myfree(oldptr);
        .      return newptr;
  181,153  }
        .  
        .  

--------------------------------------------------------------------------------
-- Auto-annotated source: /afs/ir/users/b/e/benny3t3/assign7/test-allocator.c
--------------------------------------------------------------------------------
       Ir 

-- line 360 ----------------------------------------
        .      script_t *script = pd->script;
        .  	
        .      if (!pd->libc && myinit() != 0) {
        .          allocator_error(script, 0, "myinit failed.");
        .          return;
        .      }
        .      memset(script->blocks, 0, script->num_ids*sizeof(script->blocks[0]));
        .  	
      559      CALLGRIND_TOGGLE_COLLECT;	// turn on valgrind profiler here
2,513,057      for (int line = 0;  line < script->num_ops;  line++) {
2,512,756          int id = script->ops[line].id;
  628,189          int requested_size = script->ops[line].size;
        .  		
2,263,357          switch (script->ops[line].op) {
        .  				
        .              case ALLOC:
3,312,683                  script->blocks[id].ptr = pd->libc ? malloc(requested_size) : mymalloc(requested_size);
34,254,164  => /afs/ir/users/b/e/benny3t3/assign7/allocator.c:mymalloc (301153x)
  602,306                  script->blocks[id].size = requested_size;
  301,153                  cur_total_payload_size += requested_size;
        .                  break;
        .  				
        .              case REALLOC:
  336,427                  script->blocks[id].ptr = pd->libc ? realloc(script->blocks[id].ptr, requested_size) : myrealloc(script->blocks[id].ptr, requested_size);
41,341,666  => /afs/ir/users/b/e/benny3t3/assign7/allocator.c:myrealloc (25879x)
  129,395                  cur_total_payload_size += (requested_size - script->blocks[id].size);
   51,758                  script->blocks[id].size = requested_size;
        .                  break;
        .  				
        .              case FREE:
2,710,413                  pd->libc? free(script->blocks[id].ptr) : myfree(script->blocks[id].ptr);
28,565,853  => /afs/ir/users/b/e/benny3t3/assign7/allocator.c:myfree (301157x)
1,204,628                  cur_total_payload_size -= script->blocks[id].size;
2,960,219                  script->blocks[id] = (block_t){.ptr = NULL, .size = 0};
        .                  break;
        .          }
        .          if (cur_total_payload_size > max_total_payload_size) max_total_payload_size = cur_total_payload_size;
1,898,293          if (HeapSegmentSize() > max_heap_segment_size) max_heap_segment_size = HeapSegmentSize();
5,489,615  => /afs/ir/users/b/e/benny3t3/assign7/segment.c:HeapSegmentSize (635052x)
        .      }
        .  
      344      *pd->utilization = pd->libc? NAN : ((double)max_total_payload_size)/max_heap_segment_size;
        .      CALLGRIND_TOGGLE_COLLECT;  // turn off profiler here
        .  }
        .  
        .  
        .  
        .  /* Function: VerifyBlock
        .   * ---------------------
        .   * Does some simple checks on the block returned by allocator to try to
-- line 405 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /afs/ir/users/b/e/benny3t3/assign7/segment.c
--------------------------------------------------------------------------------
       Ir 

-- line 19 ----------------------------------------
        .  // Return address of the first heap byte
        .  void *HeapSegmentStart()
        .  {
        .      return segment_start;
        .  }
        .  
        .  // Returns the in-use size of heap (in bytes)
        .  size_t HeapSegmentSize() 
1,925,745  {
        .      return segment_size;
1,283,830  }
        .  
        .  // Returns the number of bytes in each page
        .  size_t HeapPageSize() 
   61,767  {
   82,356      if (page_size == 0)
   20,589          page_size = getpagesize();
        .      return page_size;
   41,178  }
        .  
        .  
        .  // Discards any previous segment by unmapping old segment
        .  // Then reinits segments by reserving new segment with mmap
        .  void *InitHeapSegment(int numPages)
        .  {
        .      if (segment_start != NULL) { // discard any existing segment
        .          if (munmap(segment_start, MAX_HEAP) == -1) return NULL;
-- line 45 ----------------------------------------
-- line 51 ----------------------------------------
        .      segment_size = 0;
        .      return ExtendHeapSegment(numPages);
        .  }
        .  
        .  
        .  // Extends the segment by number of pages and returns the start address of new pages
        .  // In this model, the segment cannot shrink
        .  void *ExtendHeapSegment(int numPagesToAdd)
   48,041  {	
   20,589      if (segment_start == NULL) return NULL; // Init has not been called?
        .  
   13,726      void *previous_end = (char *)segment_start + segment_size;
        .      
   13,726      if (numPagesToAdd <= 0) return previous_end;
   13,726      size_t increment = numPagesToAdd*HeapPageSize();
   34,315      if (increment > MAX_HEAP || (segment_size + increment) > MAX_HEAP) 
        .          return NULL;
    6,863      segment_size += increment;
   41,178      if (mprotect(previous_end, increment, PROT_READ|PROT_WRITE) == -1)
   82,356  => ???:mprotect (8757x)
        .          return NULL;
        .      return previous_end;
   48,041  }
        .  

--------------------------------------------------------------------------------
Ir 
--------------------------------------------------------------------------------
71  percentage of events annotated

